{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Assistant, ESP8266 und mehr... Nachfolgend ein paar Anleitungen und Anregungen f\u00fcr die Realisierung von smarten Hausprojekten. Home Assistant wird als Zentrale eingesetzt. Bisher vorhanden: verschiedene ESP8266 NodeMCUs zum Auslesen von Gasz\u00e4hler und Stromz\u00e4hler Auslesen einer Solvis Heizung via Modbus TCP Feinstaubsensor auf ESP8266-Basis von Luftdaten.info Austausch von mehreren Eltako Stromsto\u00dfrelais durch ein Shelly 1PM zur smarten Flurlichtschaltung","title":"Home"},{"location":"#home-assistant-esp8266-und-mehr","text":"Nachfolgend ein paar Anleitungen und Anregungen f\u00fcr die Realisierung von smarten Hausprojekten. Home Assistant wird als Zentrale eingesetzt. Bisher vorhanden: verschiedene ESP8266 NodeMCUs zum Auslesen von Gasz\u00e4hler und Stromz\u00e4hler Auslesen einer Solvis Heizung via Modbus TCP Feinstaubsensor auf ESP8266-Basis von Luftdaten.info Austausch von mehreren Eltako Stromsto\u00dfrelais durch ein Shelly 1PM zur smarten Flurlichtschaltung","title":"Home Assistant, ESP8266 und mehr..."},{"location":"projekte/Solvis Heizung/","text":"Solvis Heizung via Modbus auslesen Eine Solvis Heizung l\u00e4sst sich mit Hilfe der Solvis Remote fernsteuern. Die Solvis Remote bildet im Prinzip das Touchdisplay der Heizung 1:1 via Browser nach. Zus\u00e4tzlich gibt es Graphen \u00fcber den Temperaturverlauf der einzelnen Sensoren des Schichtenspeichers. Aber zus\u00e4tzlich l\u00e4sst sich dar\u00fcber die Heizung via Modbus TCP auslesen und, falls gew\u00fcnscht, auch steuern. Vorbildlich ist die Bereitstellung aller Dokumentationen inkl. Modbus Register von Solvis auf deren Webseite. Home Assistant \u00dcbersicht In Home Assistant wurde die Ansicht der Anlage auf der Solvis Remote nachgebildet Zus\u00e4tzlich gibt es eine Detail-Ansicht der einzelnen Sensoren und Stati. F\u00fcr Langzeitstatistiken werden die Daten von Home Assistant in einer Prometheus Datenbank gespeichert und mittels Grafana visualisiert. ben\u00f6tigte Hardware Solvis Max Heizung Solvis Remote zur Anbindung ans Netzwerk und Bereitstellung des Modbus-TCP Protokolls Aktivierung Modbus in Solvis Heizung Zur Aktivierung von Modbus TCP muss in das Installateurmen\u00fc gewechselt werden. Den zugeh\u00f6rigen Code werde ich nicht ver\u00f6ffentlichen. Bitte mit dem Installateur der Heizung Kontakt aufnehmen. Im Men\u00fcpunkt \"Sonstiges\" -- \"Remote\" ausw\u00e4hlen und dort dann den Modus f\u00fcr \"Modbus TCP\" auf \"lesen\" oder auch \"schreiben\" einstellen. Sollten die Einstellungen korrekt sein sollte unter der IP-Addresse der Solvis-Remote auf Port TCP/502 ein Connect m\u00f6glich sein. Auszug configuration.yaml modbus: name: SolvisRemote type: tcp host: ip-addresse-solvis-remote port: 502 - platform: modbus scan_interval: 30 registers: - name: Warmwasserpuffer hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33024 - name: Warmwassertemperatur hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33025 - name: Speicherreferenztemperatur hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33026 - name: Heizungspuffertemperatur oben hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33027 - name: Aussentemperatur hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33033 - name: Heizungspuffertemperatur unten hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33032 - name: Zirkulationsdurchfluss hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33034 - name: Vorlauftemperatur hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33035 # kein Sensor angeschlossen, zeigt immer 10\u00b0C # - name: Kaltwassertemperatur # hub: SolvisRemote # unit_of_measurement: \u00b0C # scale: 0.1 # slave: 1 # precision: 2 # register_type: input # register: 33038 - name: Durchfluss Warmwasserzirkualation hub: SolvisRemote unit_of_measurement: l/min slave: 1 precision: 2 scale: 0.1 register_type: input register: 33041 - name: Laufzeit Brenner hub: SolvisRemote unit_of_measurement: h slave: 1 precision: 0 register_type: input register: 33536 - name: Brennerstarts hub: SolvisRemote unit_of_measurement: Starts slave: 1 precision: 0 register_type: input register: 33537 - name: Brennerleistung hub: SolvisRemote unit_of_measurement: kW scale: 0.1 slave: 1 precision: 2 register_type: input register: 33539 - name: Ionisationsstrom hub: SolvisRemote unit_of_measurement: mA slave: 1 scale: 0.1 precision: 1 register_type: input register: 33540 - name: VersionSC2 hub: SolvisRemote slave: 1 scale: 0.01 precision: 2 register_type: input register: 32770 - name: VersionNBG hub: SolvisRemote slave: 1 scale: 0.01 register_type: input register: 32771 - name: ZirkulationBetriebsart hub: SolvisRemote slave: 1 register_type: input register: 2049 - name: A01.Pumpe Zirkulation hub: SolvisRemote slave: 1 unit_of_measurement: V scale: 0.01 precision: 0 register_type: input register: 33280 - name: A02.Pumpe Warmwasser hub: SolvisRemote slave: 1 unit_of_measurement: V scale: 0.01 precision: 0 register_type: input register: 33281 - name: A03.Pumpe HK1 hub: SolvisRemote slave: 1 unit_of_measurement: V scale: 0.01 precision: 0 register_type: input register: 33282 - name: A12.Brennerstatus hub: SolvisRemote slave: 1 unit_of_measurement: V scale: 0.01 precision: 0 register_type: input register: 33291 - name: DigIn Stoerungen hub: SolvisRemote slave: 1 register_type: input register: 33045 - name: HKR1 Betriebsart hub: SolvisRemote slave: 1 register_type: holding register: 2818 - name: WW Solltemperatur hub: SolvisRemote unit_of_measurement: \u00b0C slave: 1 register_type: holding register: 2305 - name: HKR1 Solltemperatur Tag hub: SolvisRemote unit_of_measurement: \u00b0C slave: 1 register_type: holding register: 2820 - name: HKR1 Absenktemperatur Nacht hub: SolvisRemote unit_of_measurement: \u00b0C slave: 1 register_type: holding register: 2821 - platform: template sensors: ww_zirkulationsart: friendly_name: WW Zirkulation Betriebsart entity_id: sensor.zirkulationbetriebsart value_template: - {% if states('sensor.zirkulationbetriebsart') == '1' %} Aus {% elif states('sensor.zirkulationbetriebsart') == '2' %} Puls {% elif states('sensor.zirkulationbetriebsart') == '3' %} Temp {% elif states('sensor.zirkulationbetriebsart') == '4' %} Warten {% else %} unbekannt {% endif %} hkr1betriebsart: friendly_name: Heizkreislauf Betriebsart entity_id: sensor.hkr1_betriebsart value_template: {%if states.sensor.hkr1_betriebsart.state == '1' %}Aus{% elif states.sensor.hkr1_betriebsart.state == '2' %}Automatik{% elif states.sensor.hkr1_betriebsart.state == '3' %}Tagbetrieb{% elif states.sensor.hkr1_betriebsart.state == '4' %}Absenkbetrieb{% elif states.sensor.hkr1_betriebsart.state == '5' %}Standby{% elif states.sensor.hkr1_betriebsart.state == '6' %}Eco{% elif states.sensor.hkr1_betriebsart.state == '7' %}Urlaub{% elif states.sensor.hkr1_betriebsart.state == '8' %}WW Vorang{% elif states.sensor.zirkulationbetriebsart.state == '9' %}Frostschutz{% elif states.sensor.zirkulationbetriebsart.state == '10' %}Pumpenschutz{% elif states.sensor.hkr1_betriebsart.state == '11' %}Estrich{% endif %} Links zu Solvis Doku Doku: Solvis Modbus Register","title":"Solvis Heizung via Modbus auslesen"},{"location":"projekte/Solvis Heizung/#solvis-heizung-via-modbus-auslesen","text":"Eine Solvis Heizung l\u00e4sst sich mit Hilfe der Solvis Remote fernsteuern. Die Solvis Remote bildet im Prinzip das Touchdisplay der Heizung 1:1 via Browser nach. Zus\u00e4tzlich gibt es Graphen \u00fcber den Temperaturverlauf der einzelnen Sensoren des Schichtenspeichers. Aber zus\u00e4tzlich l\u00e4sst sich dar\u00fcber die Heizung via Modbus TCP auslesen und, falls gew\u00fcnscht, auch steuern. Vorbildlich ist die Bereitstellung aller Dokumentationen inkl. Modbus Register von Solvis auf deren Webseite.","title":"Solvis Heizung via Modbus auslesen"},{"location":"projekte/Solvis Heizung/#home-assistant-ubersicht","text":"In Home Assistant wurde die Ansicht der Anlage auf der Solvis Remote nachgebildet Zus\u00e4tzlich gibt es eine Detail-Ansicht der einzelnen Sensoren und Stati. F\u00fcr Langzeitstatistiken werden die Daten von Home Assistant in einer Prometheus Datenbank gespeichert und mittels Grafana visualisiert.","title":"Home Assistant \u00dcbersicht"},{"location":"projekte/Solvis Heizung/#benotigte-hardware","text":"Solvis Max Heizung Solvis Remote zur Anbindung ans Netzwerk und Bereitstellung des Modbus-TCP Protokolls","title":"ben\u00f6tigte Hardware"},{"location":"projekte/Solvis Heizung/#aktivierung-modbus-in-solvis-heizung","text":"Zur Aktivierung von Modbus TCP muss in das Installateurmen\u00fc gewechselt werden. Den zugeh\u00f6rigen Code werde ich nicht ver\u00f6ffentlichen. Bitte mit dem Installateur der Heizung Kontakt aufnehmen. Im Men\u00fcpunkt \"Sonstiges\" -- \"Remote\" ausw\u00e4hlen und dort dann den Modus f\u00fcr \"Modbus TCP\" auf \"lesen\" oder auch \"schreiben\" einstellen. Sollten die Einstellungen korrekt sein sollte unter der IP-Addresse der Solvis-Remote auf Port TCP/502 ein Connect m\u00f6glich sein.","title":"Aktivierung Modbus in Solvis Heizung"},{"location":"projekte/Solvis Heizung/#auszug-configurationyaml","text":"modbus: name: SolvisRemote type: tcp host: ip-addresse-solvis-remote port: 502 - platform: modbus scan_interval: 30 registers: - name: Warmwasserpuffer hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33024 - name: Warmwassertemperatur hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33025 - name: Speicherreferenztemperatur hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33026 - name: Heizungspuffertemperatur oben hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33027 - name: Aussentemperatur hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33033 - name: Heizungspuffertemperatur unten hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33032 - name: Zirkulationsdurchfluss hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33034 - name: Vorlauftemperatur hub: SolvisRemote unit_of_measurement: \u00b0C scale: 0.1 slave: 1 precision: 2 register_type: input register: 33035 # kein Sensor angeschlossen, zeigt immer 10\u00b0C # - name: Kaltwassertemperatur # hub: SolvisRemote # unit_of_measurement: \u00b0C # scale: 0.1 # slave: 1 # precision: 2 # register_type: input # register: 33038 - name: Durchfluss Warmwasserzirkualation hub: SolvisRemote unit_of_measurement: l/min slave: 1 precision: 2 scale: 0.1 register_type: input register: 33041 - name: Laufzeit Brenner hub: SolvisRemote unit_of_measurement: h slave: 1 precision: 0 register_type: input register: 33536 - name: Brennerstarts hub: SolvisRemote unit_of_measurement: Starts slave: 1 precision: 0 register_type: input register: 33537 - name: Brennerleistung hub: SolvisRemote unit_of_measurement: kW scale: 0.1 slave: 1 precision: 2 register_type: input register: 33539 - name: Ionisationsstrom hub: SolvisRemote unit_of_measurement: mA slave: 1 scale: 0.1 precision: 1 register_type: input register: 33540 - name: VersionSC2 hub: SolvisRemote slave: 1 scale: 0.01 precision: 2 register_type: input register: 32770 - name: VersionNBG hub: SolvisRemote slave: 1 scale: 0.01 register_type: input register: 32771 - name: ZirkulationBetriebsart hub: SolvisRemote slave: 1 register_type: input register: 2049 - name: A01.Pumpe Zirkulation hub: SolvisRemote slave: 1 unit_of_measurement: V scale: 0.01 precision: 0 register_type: input register: 33280 - name: A02.Pumpe Warmwasser hub: SolvisRemote slave: 1 unit_of_measurement: V scale: 0.01 precision: 0 register_type: input register: 33281 - name: A03.Pumpe HK1 hub: SolvisRemote slave: 1 unit_of_measurement: V scale: 0.01 precision: 0 register_type: input register: 33282 - name: A12.Brennerstatus hub: SolvisRemote slave: 1 unit_of_measurement: V scale: 0.01 precision: 0 register_type: input register: 33291 - name: DigIn Stoerungen hub: SolvisRemote slave: 1 register_type: input register: 33045 - name: HKR1 Betriebsart hub: SolvisRemote slave: 1 register_type: holding register: 2818 - name: WW Solltemperatur hub: SolvisRemote unit_of_measurement: \u00b0C slave: 1 register_type: holding register: 2305 - name: HKR1 Solltemperatur Tag hub: SolvisRemote unit_of_measurement: \u00b0C slave: 1 register_type: holding register: 2820 - name: HKR1 Absenktemperatur Nacht hub: SolvisRemote unit_of_measurement: \u00b0C slave: 1 register_type: holding register: 2821 - platform: template sensors: ww_zirkulationsart: friendly_name: WW Zirkulation Betriebsart entity_id: sensor.zirkulationbetriebsart value_template: - {% if states('sensor.zirkulationbetriebsart') == '1' %} Aus {% elif states('sensor.zirkulationbetriebsart') == '2' %} Puls {% elif states('sensor.zirkulationbetriebsart') == '3' %} Temp {% elif states('sensor.zirkulationbetriebsart') == '4' %} Warten {% else %} unbekannt {% endif %} hkr1betriebsart: friendly_name: Heizkreislauf Betriebsart entity_id: sensor.hkr1_betriebsart value_template: {%if states.sensor.hkr1_betriebsart.state == '1' %}Aus{% elif states.sensor.hkr1_betriebsart.state == '2' %}Automatik{% elif states.sensor.hkr1_betriebsart.state == '3' %}Tagbetrieb{% elif states.sensor.hkr1_betriebsart.state == '4' %}Absenkbetrieb{% elif states.sensor.hkr1_betriebsart.state == '5' %}Standby{% elif states.sensor.hkr1_betriebsart.state == '6' %}Eco{% elif states.sensor.hkr1_betriebsart.state == '7' %}Urlaub{% elif states.sensor.hkr1_betriebsart.state == '8' %}WW Vorang{% elif states.sensor.zirkulationbetriebsart.state == '9' %}Frostschutz{% elif states.sensor.zirkulationbetriebsart.state == '10' %}Pumpenschutz{% elif states.sensor.hkr1_betriebsart.state == '11' %}Estrich{% endif %}","title":"Auszug configuration.yaml"},{"location":"projekte/Solvis Heizung/#links-zu-solvis-doku","text":"Doku: Solvis Modbus Register","title":"Links zu Solvis Doku"},{"location":"projekte/feinstaubsensor/","text":"Feinstaubsensor mit ESP8266 und Home Assistant Nachfolgend ein paar Infos wie man einen ESP8266-basierenden Feinstaubsensor nach Anleitung von Luftdaten.info in Home Assistant einbindet. Zus\u00e4tzlich wird ein m\u00f6gliches Geh\u00e4use gezeigt da das Verstauen der Elektronik gezeigt. ben\u00f6tigte Hardware ESP8266 etwas Kabel etwas Schlauch (z.B. Aquarienschlauch f\u00fcr CO2) Feinstaubsensormodul SDS011 (optionale weitere Sensoren), hier DHT22 f\u00fcr Temperatur und Luftfeuchte Geh\u00e4use, hier eine Abzweigdose Einrichtung Die Einrichtung wird hier nicht beschrieben, siehe die Anleitungen unter Luftdaten.info Home Assistant Die Firmware von Luftdaten.info bietet auch eine lokale API-Schnittstelle die sich per Home-Assistant auslesen l\u00e4sst. Auszug configuration.yaml - platform: command_line name: Luftdata PM10 command: 'curl http://ipfeinstaubsensor/data.json' value_template: {{ value_json.sensordatavalues[0].value | round(2) }} unit_of_measurement: \u00b5g/m\u00b3 - platform: command_line name: Luftdata PM2.5 command: 'curl http://ipfeinstaubsensor/data.json' value_template: {{ value_json.sensordatavalues[1].value | round(2) }} unit_of_measurement: \u00b5g/m\u00b3 - platform: command_line name: Luftdata Temperatur DHT22 command: 'curl http://ipfeinstaubsensor/data.json' value_template: {{ value_json.sensordatavalues[2].value | round(1) }} unit_of_measurement: \u00b0C - platform: command_line name: Luftdata Luftfeuchte DHT22 command: 'curl http://ipfeinstaubsensor/data.json' value_template: {{ value_json.sensordatavalues[3].value | round(1) }} unit_of_measurement: % - platform: command_line name: Luftdata_WLAN_Empfang command: 'curl http://ipfeinstaubsensor/data.json' value_template: {{ value_json.sensordatavalues[7].value | round(0) }} unit_of_measurement: dBm - platform: statistics name: pm10 stats entity_id: sensor.luftdata_pm10 max_age: minutes: 60 - platform: statistics name: pm25 stats entity_id: sensor.luftdata_pm2_5 max_age: minutes: 60","title":"Feinstaubsensor mit ESP8266 und Home Assistant"},{"location":"projekte/feinstaubsensor/#feinstaubsensor-mit-esp8266-und-home-assistant","text":"Nachfolgend ein paar Infos wie man einen ESP8266-basierenden Feinstaubsensor nach Anleitung von Luftdaten.info in Home Assistant einbindet. Zus\u00e4tzlich wird ein m\u00f6gliches Geh\u00e4use gezeigt da das Verstauen der Elektronik gezeigt.","title":"Feinstaubsensor mit ESP8266 und Home Assistant"},{"location":"projekte/feinstaubsensor/#benotigte-hardware","text":"ESP8266 etwas Kabel etwas Schlauch (z.B. Aquarienschlauch f\u00fcr CO2) Feinstaubsensormodul SDS011 (optionale weitere Sensoren), hier DHT22 f\u00fcr Temperatur und Luftfeuchte Geh\u00e4use, hier eine Abzweigdose","title":"ben\u00f6tigte Hardware"},{"location":"projekte/feinstaubsensor/#einrichtung","text":"Die Einrichtung wird hier nicht beschrieben, siehe die Anleitungen unter Luftdaten.info","title":"Einrichtung"},{"location":"projekte/feinstaubsensor/#home-assistant","text":"Die Firmware von Luftdaten.info bietet auch eine lokale API-Schnittstelle die sich per Home-Assistant auslesen l\u00e4sst. Auszug configuration.yaml - platform: command_line name: Luftdata PM10 command: 'curl http://ipfeinstaubsensor/data.json' value_template: {{ value_json.sensordatavalues[0].value | round(2) }} unit_of_measurement: \u00b5g/m\u00b3 - platform: command_line name: Luftdata PM2.5 command: 'curl http://ipfeinstaubsensor/data.json' value_template: {{ value_json.sensordatavalues[1].value | round(2) }} unit_of_measurement: \u00b5g/m\u00b3 - platform: command_line name: Luftdata Temperatur DHT22 command: 'curl http://ipfeinstaubsensor/data.json' value_template: {{ value_json.sensordatavalues[2].value | round(1) }} unit_of_measurement: \u00b0C - platform: command_line name: Luftdata Luftfeuchte DHT22 command: 'curl http://ipfeinstaubsensor/data.json' value_template: {{ value_json.sensordatavalues[3].value | round(1) }} unit_of_measurement: % - platform: command_line name: Luftdata_WLAN_Empfang command: 'curl http://ipfeinstaubsensor/data.json' value_template: {{ value_json.sensordatavalues[7].value | round(0) }} unit_of_measurement: dBm - platform: statistics name: pm10 stats entity_id: sensor.luftdata_pm10 max_age: minutes: 60 - platform: statistics name: pm25 stats entity_id: sensor.luftdata_pm2_5 max_age: minutes: 60","title":"Home Assistant"},{"location":"projekte/gasverbrauch/","text":"Gasz\u00e4hler mit ESP8266 und Home Assistant auslesen Ein Standardgasz\u00e4hler hat auf den letzen Ziffern einen Magneten verbaut, der bei jedem Durchlauf mit einem Reed-Kontakt ausgelesen werden kann. Ein Reed-Kontakt (Magnetschalter) erzeugt bei jedem Durchlauf einen Impuls. Diese Impulse werden per ESPhome gez\u00e4hlt und in die Kubikmeter umgerechnet. 1 Impuls entspricht 0,01 m\u00b3. ben\u00f6tigte Hardware ESP8266 NodeMCU Reed Sensor, z.B. MK-471B bei Reichelt K\u00e4belchen USB-Netzteil Geh\u00e4use, z.B. Kabelabzweigdose Software auf ESP8266 ESPHome Auszug ESPhome YAML - platform: pulse_counter pin: number: GPIO5 mode: INPUT_PULLUP name: Gasverbrauch update_interval : 60s filters: - lambda: |- static float total_value = 0.0; total_value += x * 0.01; return total_value; unit_of_measurement: m\u00b3 accuracy_decimals: 2 icon: 'mdi:fire' Auswertung in Grafana Zur besseren Darstellung der Verbrauchsdaten bietet sich Grafana an. Die Daten von Home Assistant werden hier in eine InfluxDB geschrieben und \u00fcber Grafana visualisiert.","title":"Gasz\u00e4hler mit ESP8266 und Home Assistant auslesen"},{"location":"projekte/gasverbrauch/#gaszahler-mit-esp8266-und-home-assistant-auslesen","text":"Ein Standardgasz\u00e4hler hat auf den letzen Ziffern einen Magneten verbaut, der bei jedem Durchlauf mit einem Reed-Kontakt ausgelesen werden kann. Ein Reed-Kontakt (Magnetschalter) erzeugt bei jedem Durchlauf einen Impuls. Diese Impulse werden per ESPhome gez\u00e4hlt und in die Kubikmeter umgerechnet. 1 Impuls entspricht 0,01 m\u00b3.","title":"Gasz\u00e4hler mit ESP8266 und Home Assistant auslesen"},{"location":"projekte/gasverbrauch/#benotigte-hardware","text":"ESP8266 NodeMCU Reed Sensor, z.B. MK-471B bei Reichelt K\u00e4belchen USB-Netzteil Geh\u00e4use, z.B. Kabelabzweigdose","title":"ben\u00f6tigte Hardware"},{"location":"projekte/gasverbrauch/#software-auf-esp8266","text":"ESPHome","title":"Software auf ESP8266"},{"location":"projekte/gasverbrauch/#auszug-esphome-yaml","text":"- platform: pulse_counter pin: number: GPIO5 mode: INPUT_PULLUP name: Gasverbrauch update_interval : 60s filters: - lambda: |- static float total_value = 0.0; total_value += x * 0.01; return total_value; unit_of_measurement: m\u00b3 accuracy_decimals: 2 icon: 'mdi:fire'","title":"Auszug ESPhome YAML"},{"location":"projekte/gasverbrauch/#auswertung-in-grafana","text":"Zur besseren Darstellung der Verbrauchsdaten bietet sich Grafana an. Die Daten von Home Assistant werden hier in eine InfluxDB geschrieben und \u00fcber Grafana visualisiert.","title":"Auswertung in Grafana"},{"location":"projekte/stromverbrauch/","text":"(digitalen) Stromz\u00e4hler mit ESP8266 auslesen Das Auslesen eines digitalen Stromz\u00e4hlers (EhZ) geschieht anhand der optischen S0-Schnittstelle bei der der Stromz\u00e4hler den Verbrauch \u00fcber die Impulsrate einer IR-LED anzeigt. Hier zeigen 10000 Impulse 1 kwH an. \u00dcber die Pulsrate kann der aktuelle Leistungsbedarf in Watt berechnet werden. Die S0-Schnittstelle ist hier mittels einer IR-Led ausgef\u00fchrt die mittels eines Phototransistors oder wie in meinem Fall \u00fcber ein TCRT-5000 (IR-Licht/Abstandssensor) ausgelesen werden kann. Gut zu wissen: mit einer Handykamera (meist die Selfie-Kamera) kann man meist die IR-Signale \"sehen\" da dort kein IR-Filter eingebaut ist. Beim Hager EhZ sieht man allerdings nur die Signale der seriellen SML-Schnittstelle. Die Impulse der S0-IR-Led waren zu schwach um sie sichtbar in der Fotoansicht zu sehen. Hardware ESP8266 NodeMCU Phototransistor oder TCRT-5000 (IR-Licht/Abstandssensor) K\u00e4belchen USB-Netzteil Software auf ESP8266 ESPHome Auszug ESPhome YAML - platform: pulse_counter pin: GPIO5 unit_of_measurement: 'W' name: 'Energieverbrauch' update_interval: 60s filters: # - multiply: 0.06 in KW - multiply: 6 # in W accuracy_decimals: 0 icon: 'mdi:flash' id: energieverbrauch_w - platform: total_daily_energy name: Tagesverbrauch power_id: energieverbrauch_w time: - platform: sntp id: my_time Home Assistant Dort wird \u00fcber die Integration \"utility_meter\" der Stromverbrauch in Wh \u00fcber die Zeitr\u00e4ume t\u00e4glich w\u00f6chentlich monatlich j\u00e4hrlich aufgenommen und angezeigt. Diese Sensoren dienen auch als Datenbasis zur Darstellung des Verbrauchs in Grafana via InfluxDB Verbrauchswerte in Grafana","title":"(digitalen) Stromz\u00e4hler mit ESP8266 auslesen"},{"location":"projekte/stromverbrauch/#digitalen-stromzahler-mit-esp8266-auslesen","text":"Das Auslesen eines digitalen Stromz\u00e4hlers (EhZ) geschieht anhand der optischen S0-Schnittstelle bei der der Stromz\u00e4hler den Verbrauch \u00fcber die Impulsrate einer IR-LED anzeigt. Hier zeigen 10000 Impulse 1 kwH an. \u00dcber die Pulsrate kann der aktuelle Leistungsbedarf in Watt berechnet werden. Die S0-Schnittstelle ist hier mittels einer IR-Led ausgef\u00fchrt die mittels eines Phototransistors oder wie in meinem Fall \u00fcber ein TCRT-5000 (IR-Licht/Abstandssensor) ausgelesen werden kann. Gut zu wissen: mit einer Handykamera (meist die Selfie-Kamera) kann man meist die IR-Signale \"sehen\" da dort kein IR-Filter eingebaut ist. Beim Hager EhZ sieht man allerdings nur die Signale der seriellen SML-Schnittstelle. Die Impulse der S0-IR-Led waren zu schwach um sie sichtbar in der Fotoansicht zu sehen.","title":"(digitalen) Stromz\u00e4hler mit ESP8266 auslesen"},{"location":"projekte/stromverbrauch/#hardware","text":"ESP8266 NodeMCU Phototransistor oder TCRT-5000 (IR-Licht/Abstandssensor) K\u00e4belchen USB-Netzteil","title":"Hardware"},{"location":"projekte/stromverbrauch/#software-auf-esp8266","text":"ESPHome","title":"Software auf ESP8266"},{"location":"projekte/stromverbrauch/#auszug-esphome-yaml","text":"- platform: pulse_counter pin: GPIO5 unit_of_measurement: 'W' name: 'Energieverbrauch' update_interval: 60s filters: # - multiply: 0.06 in KW - multiply: 6 # in W accuracy_decimals: 0 icon: 'mdi:flash' id: energieverbrauch_w - platform: total_daily_energy name: Tagesverbrauch power_id: energieverbrauch_w time: - platform: sntp id: my_time","title":"Auszug ESPhome YAML"},{"location":"projekte/stromverbrauch/#home-assistant","text":"Dort wird \u00fcber die Integration \"utility_meter\" der Stromverbrauch in Wh \u00fcber die Zeitr\u00e4ume t\u00e4glich w\u00f6chentlich monatlich j\u00e4hrlich aufgenommen und angezeigt. Diese Sensoren dienen auch als Datenbasis zur Darstellung des Verbrauchs in Grafana via InfluxDB","title":"Home Assistant"},{"location":"projekte/stromverbrauch/#verbrauchswerte-in-grafana","text":"","title":"Verbrauchswerte in Grafana"},{"location":"projekte/tasterschaltung/","text":"Eltako Stromsto\u00dfrelais durch Shelly 1PM ersetzen Achtung! Arbeiten an 230V k\u00f6nnen t\u00f6dlich sein. Falls kein Know-How vorhanden ist, lieber einen Elektroinstallateur beauftragen! Durch ein Shelly 1PM wird eine Tasterschaltung f\u00fcr Flurlicht smart \u00fcber Home Assistant steuerbar. Zus\u00e4tzlich kann der Stromverbrauch gemessen werden. Eingesetzt wurden Shelly 1PM mit der Original Firmware ohne Aktivierung der Cloud-Anbindung. Anbindung an Home Assistant via MQTT welches nativ in der Firmware enthalten ist. Vorteil der Shelly 1PM: man kann weiterhin \u00fcber die vorhandenen 230V Tasterschalter das Licht an und aus schalten. ben\u00f6tigte Hardware Shelly 1PM Wago Klemmen etwas Kabel Know How Konfiguration Shelly 1PM Damit der Shelly 1 PM als Stromsto\u00dfrelais fungiert, muss der Button-Type auf \"Momentary\" eingestellt werden. Home Assistant Zur automatischen Erkennung von Shelly Devices nutze ich das Shelly Discovery Skript von hier: Shelly Discovery Skript","title":"Eltako Stromsto\u00dfrelais durch Shelly 1PM ersetzen"},{"location":"projekte/tasterschaltung/#eltako-stromstorelais-durch-shelly-1pm-ersetzen","text":"Achtung! Arbeiten an 230V k\u00f6nnen t\u00f6dlich sein. Falls kein Know-How vorhanden ist, lieber einen Elektroinstallateur beauftragen! Durch ein Shelly 1PM wird eine Tasterschaltung f\u00fcr Flurlicht smart \u00fcber Home Assistant steuerbar. Zus\u00e4tzlich kann der Stromverbrauch gemessen werden. Eingesetzt wurden Shelly 1PM mit der Original Firmware ohne Aktivierung der Cloud-Anbindung. Anbindung an Home Assistant via MQTT welches nativ in der Firmware enthalten ist. Vorteil der Shelly 1PM: man kann weiterhin \u00fcber die vorhandenen 230V Tasterschalter das Licht an und aus schalten.","title":"Eltako Stromsto\u00dfrelais durch Shelly 1PM ersetzen"},{"location":"projekte/tasterschaltung/#benotigte-hardware","text":"Shelly 1PM Wago Klemmen etwas Kabel Know How","title":"ben\u00f6tigte Hardware"},{"location":"projekte/tasterschaltung/#konfiguration-shelly-1pm","text":"Damit der Shelly 1 PM als Stromsto\u00dfrelais fungiert, muss der Button-Type auf \"Momentary\" eingestellt werden.","title":"Konfiguration Shelly 1PM"},{"location":"projekte/tasterschaltung/#home-assistant","text":"Zur automatischen Erkennung von Shelly Devices nutze ich das Shelly Discovery Skript von hier: Shelly Discovery Skript","title":"Home Assistant"}]}